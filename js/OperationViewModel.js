/*Copyright Tim Fleming, Crawford Currie 2014-2025. This file is part of SVGcut, see the copyright and LICENSE at the root of the distribution. */

/* global ClipperLib */

// import "knockout";
/* global ko */
/* global App */

import { ViewModel } from "./ViewModel.js";

import * as InternalPaths from "./InternalPaths.js";
import * as SnapPaths from "./SnapPaths.js";
import * as Cam from "./Cam.js";

/**
 * @typedef {object} RawPath
 * @property {SnapPath} path path segments
 * @property {boolean} nonzero winding rule
*/

/**
 * ViewModel for an operation in the `Operations` card
 */
class OperationViewModel extends ViewModel {

  /**
   * @param {UnitConverter} unit converter to use
   * @param {RawPath[]} rawPaths input paths to the operation
   * @param {boolean} disableRecombination true to stop recombination,
   * usually because we are in a sequence of steps and recombination can
   * wait.
   */
  constructor(unitConverter, rawPaths, disableRecombination = false) {
    super(unitConverter);

    /**
     * The input to this operation.
     * @member {RawPath[]}
     * @private
     */
    this.rawPaths = rawPaths;

    /**
     * Geometry generated by combining all the paths in this operation
     * using combineOp.
     * @member {InternalPath[]}
     * @private
     */
    this.combinedGeometry = [];

    /**
     * SVG showing the geometry for this operation.
     * This is a path that gets added to App.svgGroups.toolPaths
     * @member {SVGGaphicsElement}
     * @private
     */
    this.combinedGeometrySvg = null;

    /**
     * The operation used to combine raw paths to generate the resulting
     * combinedGeometry. One of "Union" (the default), "Intersect", "Diff"
     * or "Xor"
     * @member {observable.<string>}
     */
    this.combineOp = ko.observable("Union");
    this.combineOp.subscribe(() => this.recombine());

    /**
     * The operation, one of "Pocket", "Inside", "Outside" or "Engrave".
     * The default is "Pocket"
     * @member {observable.<string>}
     */
    this.operation = ko.observable("Pocket");
    this.operation.subscribe(() => this.recombine());

    /**
     * The UI button that opens the detail pane for this operation
     * @member {observable.<button>}
     */
    this.showDetail = ko.observable(false);

    /**
     * The (optional, user provided) name of ths operation
     * @member {observable.<string>}
     */
    this.name = ko.observable("");
    this.name.subscribe(() => {
      if (!this.generatingToolpath)
        document.dispatchEvent(new Event("TOOL_PATHS_CHANGED"));
    });

    /**
     * Operations can be selectively enabled/disabled for Gcode
     * generation
     * @member {observable.<boolean>}
     */
    this.enabled = ko.observable(true);
    this.enabled.subscribe(newValue => {
      let v = newValue ? "visible" : "hidden";
      if (this.combinedGeometrySvg)
        this.combinedGeometrySvg.attr("visibility", v);
      if (this.toolPathSvg)
        this.toolPathSvg.attr("visibility", v);
    });
    this.enabled.subscribe(() => {
      if (!this.generatingToolpath)
        document.dispatchEvent(new Event("TOOL_PATHS_CHANGED"));
    });

    /**
     * Enable ramping. See README.md
     * @member {observable.<boolean>}
     */
    this.ramp = ko.observable(false);

    /**
     * Either "Conventional" or "Climb". See README.md
     * @member {observable.<string>}
     */
    this.direction = ko.observable("Conventional");
    this.direction.subscribe(() => this.removeToolPaths());

    /**
     * Paths taken by the tool to execute this operation.
     * @member {observable.<CamPath[]>}
     */
    this.toolPaths = ko.observable([]);
    this.toolPaths.subscribe(() => {
      if (!this.generatingToolpath)
        document.dispatchEvent(new Event("TOOL_PATHS_CHANGED"));
    });

    /**
     * Svg path generated to show the tool paths. Will be added to
     * the App.svgGroups.toolPaths
     * @member {SVGElement}
     * @private
     */
    this.toolPathSvg = null;

    /**
     * Depth to cut on each pass. Mirrors passDepth in the Tool model.
     * @member {observable.<number>}
     */
    this.cutDepth = ko.observable(0);
    unitConverter.add(this.cutDepth);
    this.cutDepth(App.models.Tool.passDepth());

    /**
     * Amount of material to leave uncut.
     * @member {observable.<number>}
     */
    this.margin = ko.observable(0);
    unitConverter.add(this.margin);
    this.margin.subscribe(() => this.recombine());

    /**
     * How wide a path to cut. If this is less than the cutter diameter
     * it will be rounded up.
     * @member {observable.<number>}
     */
    this.width = ko.observable(0);
    unitConverter.add(this.width);
    this.width.subscribe(() => this.recombine());

    /**
     * Flag to lock out recombination, usually because we are in a
     * sequence of steps and recombination can wait. See recombine()
     * for more.
     * @member {boolean}
     * @private
     */
    this.disableRecombination = disableRecombination;

    /**
     * Flag to lock out toolpath generation.
     * @member {boolean}
     * @private
     */
    this.generatingToolpath = false;

    if (!disableRecombination)
      this.recombine();
  }

  /**
   * @override
   */
  initialise(nodes) {
    this.addPopovers([
      { id: "opEnabled" },
      { id: "opCutDepth" },
      { id: "opGenerate" },
      { id: "opName" },
      { id: "opRamp" },
      { id: "opCombine" },
      { id: "opDirection" },
 //CPP     { id: "opVMaxDepth" },
      { id: "opMargin" },
      { id: "opWidth" }
    ], nodes);
  }

  /**
   * Toggle the display of the detail dropdown
   */
  toggleDetail() {
    this.showDetail(!this.showDetail());
  }

  /**
   * Remove the geometry contributed by this operation
   */
  removeCombinedGeometry() {
    if (this.combinedGeometrySvg)
      this.combinedGeometrySvg.remove();
    this.combinedGeometrySvg = null;
    this.combinedGeometry = null;
  }

  /**
   * Remove the tool path geometry contributed by this operation
   */
  removeToolPaths() {
    if (this.toolPathSvg)
      this.toolPathSvg.remove();
    this.toolPathSvg = null;
    this.toolPaths([]);
  }

  /**
   * Get the width of the path created by the tool as it cuts
   * @return {number} in internal units
   */
  toolPathWidth() {
    const td = App.models.Tool.diameter.toUnits("internal");
    const width = this.width.toUnits("internal");
    if (width < td)
      return td;
    return width;
  }

  /**
   * Invoked from HTML. Operations are bound to this view model, so
   * when removeOperation is bound it comes here.
   */
  removeOperation() {
    App.models.Operations.removeOperation(this);
  }

  /**
   * (Re)generate combinedGeometry from the paths associated with this
   * operation (this.rawPaths)
   * @return {boolean} true if recombination was successful
   */
  recombine() {
    if (this.disableRecombination)
      return;

    const startTime = Date.now();
    console.debug(`Operation ${this.name} recombine...`);

    this.removeCombinedGeometry();
    this.removeToolPaths();

    const all = [];
    for (const rp of this.rawPaths) {
      // rawPaths are RawPath
      const geometry = SnapPaths.toInternal(rp.path);
      const fillRule = rp.nonzero
            ? ClipperLib.PolyFillType.pftNonZero
            : ClipperLib.PolyFillType.pftEvenOdd;
      all.push(InternalPaths.simplifyAndClean(geometry, fillRule));
    }

    let clipType;
    switch (this.combineOp()) {
    case "Intersect": clipType = ClipperLib.ClipType.ctIntersection; break;
    case "Diff":      clipType = ClipperLib.ClipType.ctDifference; break;
    case "Xor":       clipType = ClipperLib.ClipType.ctXor; break;
    case "Union":
    default:          clipType = ClipperLib.ClipType.ctUnion; break;
    }

    // Merge
    this.combinedGeometry = all[0];
    for (let i = 1; i < all.length; ++i)
      this.combinedGeometry = InternalPaths.clip(
        this.combinedGeometry, all[i], clipType);

    let previewGeometry = this.combinedGeometry;

    if (previewGeometry.length > 0) {
      let off = this.margin.toUnits("internal");
      if (this.operation() == "Pocket"
          //CPP || this.operation() == "V Pocket"
          || this.operation() == "Inside")
        off = -off;
      if (this.operation() != "Engrave" && off != 0) {
        previewGeometry = InternalPaths.offset(previewGeometry, off);
      }

      if (this.operation() == "Inside" || this.operation() == "Outside") {
        const width = this.toolPathWidth();
        if (this.operation() == "Inside")
          previewGeometry = InternalPaths.diff(
            previewGeometry, InternalPaths.offset(previewGeometry, -width));
        else
          previewGeometry = InternalPaths.diff(
            InternalPaths.offset(previewGeometry, width), previewGeometry);
      }
    }

    if (previewGeometry.length > 0) {
      const path = SnapPaths.fromInternal(previewGeometry);
      if (path) {
        // Add the new geometry to the global SVG group
        this.combinedGeometrySvg = App.svgGroups.combinedGeometry
        .path(path)
        .attr("class", "combinedGeometry");
        this.enabled(true);
      }
    }

    console.debug(`Operation ${this.name} recombine took ${Date.now() - startTime}`);
  }

  /**
   * Generate the tool path(s) for this operation in response to
   * the "Generate" button. The tool paths are type CamPath and are
   * written to `this.toolPaths`.
   * SMELL: why not do this whenever something changes?
   */
  generateToolPath() {
    const toolCamArgs = App.models.Tool.getCamArgs();

    const startTime = Date.now();
    console.debug("generateToolPath...");

    this.generatingToolpath = true;
    this.removeToolPaths();

    let geometry = this.combinedGeometry;

    let off = this.margin.toUnits("internal");
    if (this.operation() == "Pocket"
        //CPP || this.operation() == "V Pocket"
        || this.operation() == "Inside")
      off = -off;
    if (this.operation() !== "Engrave" && off != 0)
      geometry = InternalPaths.offset(geometry, off);

    let paths, width;
    switch (this.operation()) {
    case "Pocket":
      paths = Cam.pocket(geometry, toolCamArgs.diameter,
                   1 - toolCamArgs.stepover,
                   this.direction() == "Climb");
      break;
    /* CPP
    case "V Pocket":
      paths = Cam.vPocket(geometry, App.models.Tool.angle(),
        toolCamArgs.passDepthClipper, this.cutDepth.toUnits("internal"),
        toolCamArgs.stepover, this.direction() == "Climb"));
      break;
    */
    case "Inside": case "Outside":
      width = this.width.toUnits("internal");
      if (width < toolCamArgs.diameter)
        width = toolCamArgs.diameter;
      paths = Cam.outline(geometry, toolCamArgs.diameter,
                          this.operation() == "Inside", width,
                          1 - toolCamArgs.stepover,
                          this.direction() == "Climb");
      break;
    case "Engrave":
      paths = Cam.engrave(geometry, this.direction() == "Climb");
    }
    this.toolPaths(paths);

    // Display the computer toolpaths
    const spaths = SnapPaths.fromInternal(
      InternalPaths.fromCamPaths(this.toolPaths()));
    if (spaths && spaths.length > 0) {
      this.toolPathSvg = App.svgGroups.toolPaths
      .path(spaths)
      .attr("style", "width:3px")
      .attr("class", "toolPath");
    } else {
      App.showAlert("noToolPaths", "alert-warning", this.name);
    }

    console.debug(`generateToolPath for ${spaths.length} paths took ${Date.now() - startTime}`);

    this.enabled(true);
    this.generatingToolpath = false;
    document.dispatchEvent(new Event("TOOL_PATHS_CHANGED"));
  }

  /**
   * @override
   */
  toJson() {
    const result = {
      rawPaths: this.rawPaths,
      name: this.name(),
      enabled: this.enabled(),
      combineOp: this.combineOp(),
      operation: this.operation()
    };
    /* CPP
    if (this.operation() != 'V Pocket') { */
      result.direction = this.direction();
      result.cutDepth = this.cutDepth();
      result.ramp = this.ramp();
    /*CPP }*/
    if (this.operation() != 'Engrave')
      result.margin = this.margin();
    if (this.operation() == 'Inside' || this.operation() == 'Outside')
      result.width = this.width();
    return result;
  };

  /**
   * @override
   */
  fromJson(json) {
    // suppress recombine until we're finished
    this.disableRecombination = true;

    this.rawPaths = json.rawPaths;
    this.updateObservable(json, 'name');
    this.updateObservable(json, 'ramp');
    this.updateObservable(json, 'combineOp');
    this.updateObservable(json, 'operation');
    this.updateObservable(json, 'direction');
    this.updateObservable(json, 'cutDepth');
    this.updateObservable(json, 'margin');
    this.updateObservable(json, 'width');
    this.updateObservable(json, 'enabled');

    this.disableRecombination = false;
    this.recombine();
  };
}

export { OperationViewModel }
