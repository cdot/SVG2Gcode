/*Copyright Tim Fleming, Crawford Currie 2014-2025. This file is part of SVGcut, see the copyright and LICENSE at the root of the distribution. */
/* global assert */

// import "knockout";
/* global ko */
/* global App */

import { ViewModel } from "./ViewModel.js";

import { CutPath } from "./CutPath.js";
import { CutPaths } from "./CutPaths.js";
import * as SVG from "./SVG.js";
import * as Cam from "./Cam.js";

/**
 * @typedef {object} RawPath
 * @property {svgSegment[]} path path segments
 * @property {boolean} nonzero winding rule
*/

const POPOVERS = [
  { id: "opEnabled" },
  { id: "opOperation" },
  { id: "opCutDepth" },
  { id: "opName" },
  { id: "opRamp" },
  { id: "opCombine" },
  { id: "opDirection" },
  { id: "opVMaxDepth" },
  { id: "opMargin" },
  { id: "opSpacing" },
  { id: "opWidth" }
];

const FIELDS = [ "name", "enabled", "combineOp", "operation", "cutDepth",
                 "width", "direction", "spacing", "ramp", "margin" ];

/**
 * ViewModel for an operation in the `Operations` card
 * @listens UPDATE_TOOL_PATHS signal to update all tool paths
 */
class OperationViewModel extends ViewModel {

  /**
   * @param {UnitConverter} unit converter to use
   * @param {CutPaths} operandPaths input paths to the operation
   */
  constructor(unitConverter, operandPaths) {
    super(unitConverter);

    assert(!operandPaths || operandPaths instanceof CutPaths);

    /**
     * The input to this operation.
     * @member {CutPaths}
     * @private
     */
    this.operandPaths = operandPaths;

    /**
     * Geometry generated by combining all the paths in this operation
     * using combineOp.
     * @member {CutPaths}
     * @private
     */
    this.combinedGeometry = new CutPaths();

    /**
     * The combined geometry generated by the operation, in SVG format
     * for adding to #toolPathsSVGGroup. This will be a single path.
     * @member {SVGGaphicsElement}
     * @private
     */
    this.svgPreviewPath = null;

    /**
     * SVG path generated to show the tool paths. Will be added to
     * the #toolPathsSVGGroup element
     * @member {SVGElement}
     * @private
     */
    this.svgToolPath = null;

    /**
     * The operation used to combine raw paths to generate the resulting
     * combinedGeometry. One of "Union" (the default), "Intersect", "Diff"
     * or "Xor"
     * @member {observable.<string>}
     */
    this.combineOp = ko.observable("Union");
    this.combineOp.subscribe(() => this.recombine());

    /**
     * The available operations. This is based on the
     * the mix of open and closed paths in the operandPaths.
     */
    this.availableOperations = ko.observableArray([
      App.PolyOps.Engrave,
      App.PolyOps.Perforate
    ]);

    if (operandPaths.filter(p => p.isClosed).length > 0) {
      this.availableOperations.push(
        App.PolyOps.Inside,
        App.PolyOps.Outside,
        App.PolyOps.ConcentricPocket,
        App.PolyOps.RasterPocket);
    }

    /**
     * The operation type. Default is Engrave as it's simplest.
     * @member {observable.<string>}
     */
    this.operation = ko.observable(App.PolyOps.Engrave);
    this.operation.subscribe(() => this.recombine());

    /**
     * The UI button that opens the detail pane for this operation
     * @member {observable.<button>}
     */
    this.showDetail = ko.observable(false);

    /**
     * The (optional, user provided) name of this operation
     * @member {observable.<string>}
     */
    this.name = ko.observable("");
    this.name.subscribe(() => this.updateGcode());

    /**
     * Operations can be selectively enabled/disabled for Gcode
     * generation
     * @member {observable.<boolean>}
     */
    this.enabled = ko.observable(true);
    this.enabled.subscribe(newValue => {
      let v = newValue ? "visible" : "hidden";
      if (this.svgPreviewPath)
        this.svgPreviewPath.setAttribute("visibility", v);
      if (this.svgToolPath)
        this.svgToolPath.setAttribute("visibility", v);
    });
    this.enabled.subscribe(() => this.updateGcode());

    /**
     * Enable ramping. See README.md
     * @member {observable.<boolean>}
     */
    this.ramp = ko.observable(false);
    this.ramp.subscribe(() => this.updateGcode());
    /**
     * Either "Conventional" or "Climb". See README.md
     * @member {observable.<string>}
     */
    this.direction = ko.observable("Conventional");
    this.direction.subscribe(() =>
      document.dispatchEvent(new Event("UPDATE_GCODE")));

    /**
     * Paths taken by the tool to execute this operation.
     * @member {observable.<CutPaths>}
     */
    this.toolPaths = ko.observable(new CutPaths());
    this.toolPaths.subscribe(() => this.updateGcode());

    /**
     * Maximum depth to cut to.
     * @member {observable.<number>}
     */
    this.cutDepth = ko.observable(0);
    unitConverter.add(this.cutDepth);
    this.cutDepth(App.models.Tool.passDepth());
    this.cutDepth.subscribe(() => this.updateGcode());

    /**
     * Amount of material to leave uncut.
     * @member {observable.<number>}
     */
    this.margin = ko.observable(0);
    unitConverter.add(this.margin);
    this.margin.subscribe(() => this.recombine());

    /**
     * Spacing of perforations.
     * @member {observable.<number>}
     */
    this.spacing = ko.observable(1);
    unitConverter.add(this.spacing);
    this.spacing.subscribe(() => this.recombine());

    /**
     * How wide a path to cut. If this is less than the cutter diameter
     * it will be rounded up.
     * @member {observable.<number>}
     */
    this.width = ko.observable(0);
    unitConverter.add(this.width);
    this.width.subscribe(() => this.recombine());

    /**
     * Flag to lock out recombination, usually because we are in a
     * sequence of steps and recombination can wait. See recombine()
     * for more.
     * @member {boolean}
     * @private
     */
    this.disableRecombination = false;

    /**
     * Flag to lock out toolpath generation.
     * @member {boolean}
     * @private
     */
    this.generatingToolpath = false;

    document.addEventListener(
      "UPDATE_TOOL_PATHS", () => this.generateToolPaths());
  }

  /**
   * Used internally to signal that toolPaths or Gcode generation
   * parameters have changed.
   * @private
   */
  updateGcode() {
    if (!this.generatingToolpath)
      document.dispatchEvent(new Event("UPDATE_GCODE"));
  }

  /**
   * @override
   */
  initialise(nodes) {
    this.addPopovers(POPOVERS, nodes);
  }

  /**
   * Toggle the display of the detail dropdown
   */
  toggleDetail() {
    this.showDetail(!this.showDetail());
  }

  /**
   * Remove the geometry contributed by this operation
   */
  removeCombinedGeometry() {
    if (this.svgPreviewPath)
      this.svgPreviewPath.remove();
    this.svgPreviewPath = null;
    this.combinedGeometry = null;
  }

  /**
   * Remove the tool path geometry contributed by this operation
   */
  removeToolPaths() {
    if (this.svgToolPath)
      this.svgToolPath.remove();
    this.svgToolPath = null;
    this.toolPaths(new CutPaths());
  }

  /**
   * Get the width of the path created by the tool as it cuts
   * @return {number} in internal units
   */
  toolPathWidth() {
    const td = App.models.Tool.diameter.toUnits("integer");
    const width = this.width.toUnits("integer");
    if (width < td)
      return td;
    return width;
  }

  /**
   * Invoked from HTML. Operations are bound to this view model, so
   * when removeOperation is bound it comes here.
   */
  removeOperation() {
    App.models.Operations.removeOperation(this);
  }

  /**
   * (Re)generate combinedGeometry from the paths associated with this
   * operation (this.operandPaths) and recompile tool paths.
   * @return {boolean} true if recombination was successful
   */
  recombine() {
    if (this.disableRecombination)
      return;

    const opName = this.operation();

    this.removeCombinedGeometry();
    this.removeToolPaths();

    // Combined paths operations are only applied to closed paths
    const closedPaths = this.operandPaths.filter(p => p.isClosed);
    let geom = new CutPaths(closedPaths[0]);

    for (let i = 1; i < closedPaths.length; i++) {
      const others = new CutPaths(closedPaths[i]);
      switch (this.combineOp()) {
      case "Intersect": geom = geom.intersection(others); break;
      case "Diff":      geom = geom.diff(others); break;
      case "Xor":       geom = geom.xor(others); break;
      default:          geom = geom.union(others); break;
      }
    }
    const openPaths = this.operandPaths.filter(p => !p.isClosed);
    for (const op of openPaths)
      geom.push(op);

    this.combinedGeometry = geom;

    let previewGeometry = this.combinedGeometry;

    if (previewGeometry.length > 0) {
      let off = this.margin.toUnits("integer");

      if (opName === App.PolyOps.ConcentricPocket
          || opName === App.PolyOps.Inside)
        off = -off;

      if (opName !== App.PolyOps.Engrave && off !== 0)
        previewGeometry = previewGeometry.offset(off);

      if (opName === App.PolyOps.Inside
          || opName === App.PolyOps.Outside
          || opName === App.PolyOps.Perforate) {
        const width = this.toolPathWidth();
        if (opName === App.PolyOps.Inside) {
          previewGeometry =
            previewGeometry.diff(previewGeometry.offset(-width));
        } else // Outside or Perforate
          previewGeometry =
            previewGeometry.offset(width).diff(previewGeometry);
      }
    }

    if (previewGeometry.length > 0) {
      const segs = previewGeometry.toSegments();
      if (segs && segs.length > 0) {
        const svgel = document.createElementNS(
          'http://www.w3.org/2000/svg', "path");
        svgel.setAttribute("d", SVG.segments2d(segs));
        svgel.setAttribute("class", "combinedGeometry");
        document.getElementById("combinedGeometrySVGGroup")
        .append(svgel);
        this.svgPreviewPath = svgel;

        this.enabled(true);
      }
    }

    this.generateToolPaths();
  }

  /**
   * (Re)generate the tool path(s) for this operation. The tool paths are
   * type CutPath and are written to `this.toolPaths`. Generating toolpaths
   * invalidates Gcode, among other things. Triggers `UPDATE_GCODE`
   * to signal this to the rest of the app.
   */
  generateToolPaths() {
    this.generatingToolpath = true;

    let geometry = this.combinedGeometry;
    const opName = this.operation();
    const toolModel = App.models.Tool;
    const toolDiameter = toolModel.diameter.toUnits("integer");
    const bitAngle = toolModel.angle();
    const passDepth = toolModel.passDepth.toUnits("integer");
    const stepover = toolModel.stepover();
    const climb = (this.direction() === "Climb");
    const zOnTop = App.models.Material.zOrigin() === "Top";
    const cutDepth = this.cutDepth();
    const topZ = zOnTop ? 0 : cutDepth;
    const botZ = zOnTop ? -cutDepth : 0;

    // inset/outset the geometry as dictated by the margin
    let off = this.margin.toUnits("integer");
    if (opName === App.PolyOps.ConcentricPocket
        || opName === App.PolyOps.RasterPocket
        || opName === App.PolyOps.Inside)
      off = -off; // inset
    if (opName !== App.PolyOps.Engrave && off !== 0)
      geometry = geometry.offset(off);

    let paths, width;
    switch (opName) {

    case App.PolyOps.ConcentricPocket:
      paths = Cam.concentricPocket(geometry, toolDiameter, 1 - stepover, climb);
      break;

    case App.PolyOps.RasterPocket:
      paths = Cam.rasterPocket(geometry, toolDiameter, 1 - stepover, climb);
      break;

    case App.PolyOps.Inside:
    case App.PolyOps.Outside:
      width = this.width.toUnits("integer");
      if (width < toolDiameter)
        width = toolDiameter;
      paths = Cam.outline(
        geometry, toolDiameter,
        opName === App.PolyOps.Inside, // isInside
        width,
        1 - stepover,
        climb);
      break;

    case App.PolyOps.Perforate:
      paths = Cam.perforate(
        geometry, toolDiameter, this.spacing.toUnits("integer"),
        topZ, botZ);
      break;

    case App.PolyOps.Engrave:
      paths = Cam.engrave(geometry, climb);
      break;
    }

    this.removeToolPaths();
    this.toolPaths(paths);

    // Add the toolpaths to the SVG view
    const segs = this.toolPaths().toSegments();
    if (segs && segs.length > 0) {
      const svgel = document.createElementNS(
          'http://www.w3.org/2000/svg', "path");
      svgel.setAttribute("d", SVG.segments2d(segs));
      svgel.setAttribute("class", "toolPath");
      document.getElementById("toolPathsSVGGroup").append(svgel);
      this.svgToolPath = svgel;
    } else {
      App.showAlert("noToolPaths", "alert-warning", this.name());
    }

    this.enabled(true);
    this.generatingToolpath = false;

    // Signal this change to other listeners
    document.dispatchEvent(new Event("UPDATE_GCODE"));
  }

  /**
   * Determine which of the operation fields needs to be enabled for this
   * operation.
   * @param {string} what which field e.g. "width"
   * @return {boolean} true if the field is needed for the current op.
   * @private
   */
  needs(what) {
    const op = this.operation();
    switch (what) {
    case "width": return op === App.PolyOps.Inside
      || op === App.PolyOps.Outside;

    case "direction":
    case "ramp":  return op !== App.PolyOps.Perforate;

    case "margin":  return op !== App.PolyOps.Perforate
      && op !== App.PolyOps.Engrave;

    case "spacing": return op === App.PolyOps.Perforate;
    }
    return true;
  }

  /**
   * @override
   */
  toJson() {
    const json = {
      operandPaths: this.operandPaths
    };

    for (const f of FIELDS)
      if (this.needs(f))
        json[f] = this[f]();

    return json;
  };

  /**
   * @override
   */
  fromJson(json) {
    // suppress recombine until we're finished
    this.disableRecombination = true;

    this.operandPaths = json.operandPaths;
    for (const f of FIELDS)
      this.updateObservable(json, f);

    this.disableRecombination = false;
    this.recombine();
  };
}

export { OperationViewModel }
