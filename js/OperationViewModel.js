/*Copyright Tim Fleming, Crawford Currie 2014-2025. This file is part of SVGcut, see the copyright and LICENSE at the root of the distribution. */

/* global ClipperLib */

// import "knockout";
/* global ko */
/* global App */

import { ViewModel } from "./ViewModel.js";

import * as InternalPaths from "./InternalPaths.js";
import * as SnapPaths from "./SnapPaths.js";
import * as Cam from "./Cam.js";

/**
 * @typedef {object} RawPath
 * @property {SnapPath} path path segments
 * @property {boolean} nonzero winding rule
*/

const POPOVERS = [
      { id: "opEnabled" },
      { id: "opOperation" },
      { id: "opCutDepth" },
      { id: "opGenerate" },
      { id: "opName" },
      { id: "opRamp" },
      { id: "opCombine" },
      { id: "opDirection" },
      { id: "opVMaxDepth" },
      { id: "opMargin" },
      { id: "opSpacing" },
      { id: "opWidth" }
];

/**
 * ViewModel for an operation in the `Operations` card
 */
class OperationViewModel extends ViewModel {

  /**
   * @param {UnitConverter} unit converter to use
   * @param {RawPath[]} rawPaths input paths to the operation
   */
  constructor(unitConverter, rawPaths) {
    super(unitConverter);

    /**
     * The input to this operation.
     * @member {RawPath[]}
     * @private
     */
    this.rawPaths = rawPaths;

    /**
     * Geometry generated by combining all the paths in this operation
     * using combineOp.
     * @member {InternalPath[]}
     * @private
     */
    this.combinedGeometry = [];

    /**
     * SVG showing the geometry for this operation.
     * This is a path that gets added to App.svgGroups.toolPaths
     * @member {SVGGaphicsElement}
     * @private
     */
    this.combinedGeometrySvg = null;

    /**
     * The operation used to combine raw paths to generate the resulting
     * combinedGeometry. One of "Union" (the default), "Intersect", "Diff"
     * or "Xor"
     * @member {observable.<string>}
     */
    this.combineOp = ko.observable("Union");
    this.combineOp.subscribe(() => this.recombine());

    /**
     * The operation type. Default is "Engrave" as it's simplest.
     * @member {observable.<string>}
     */
    this.operation = ko.observable("Engrave");
    this.operation.subscribe(() => this.recombine());

    /**
     * The UI button that opens the detail pane for this operation
     * @member {observable.<button>}
     */
    this.showDetail = ko.observable(false);

    /**
     * The (optional, user provided) name of this operation
     * @member {observable.<string>}
     */
    this.name = ko.observable("");
    this.name.subscribe(() => {
      if (!this.generatingToolpath)
        document.dispatchEvent(new Event("TOOL_PATHS_CHANGED"));
    });

    /**
     * Operations can be selectively enabled/disabled for Gcode
     * generation
     * @member {observable.<boolean>}
     */
    this.enabled = ko.observable(true);
    this.enabled.subscribe(newValue => {
      let v = newValue ? "visible" : "hidden";
      if (this.combinedGeometrySvg)
        this.combinedGeometrySvg.attr("visibility", v);
      if (this.toolPathSvg)
        this.toolPathSvg.attr("visibility", v);
    });
    this.enabled.subscribe(() => {
      if (!this.generatingToolpath)
        document.dispatchEvent(new Event("TOOL_PATHS_CHANGED"));
    });

    /**
     * Enable ramping. See README.md
     * @member {observable.<boolean>}
     */
    this.ramp = ko.observable(false);

    /**
     * Either "Conventional" or "Climb". See README.md
     * @member {observable.<string>}
     */
    this.direction = ko.observable("Conventional");
    this.direction.subscribe(() => this.removeToolPaths());

    /**
     * Paths taken by the tool to execute this operation.
     * @member {observable.<CamPath[]>}
     */
    this.toolPaths = ko.observable([]);
    this.toolPaths.subscribe(() => {
      if (!this.generatingToolpath)
        document.dispatchEvent(new Event("TOOL_PATHS_CHANGED"));
    });

    /**
     * Svg path generated to show the tool paths. Will be added to
     * the App.svgGroups.toolPaths
     * @member {SVGElement}
     * @private
     */
    this.toolPathSvg = null;

    /**
     * Depth to cut on each pass. Mirrors passDepth in the Tool model.
     * @member {observable.<number>}
     */
    this.cutDepth = ko.observable(0);
    unitConverter.add(this.cutDepth);
    this.cutDepth(App.models.Tool.passDepth());

    /**
     * Amount of material to leave uncut.
     * @member {observable.<number>}
     */
    this.margin = ko.observable(0);
    unitConverter.add(this.margin);
    this.margin.subscribe(() => this.recombine());

    /**
     * Amount of material to leave between perforations.
     * @member {observable.<number>}
     */
    this.spacing = ko.observable(0);
    unitConverter.add(this.spacing);
    this.spacing.subscribe(() => this.recombine());

    /**
     * How wide a path to cut. If this is less than the cutter diameter
     * it will be rounded up (for operations other than V Carve).
     * @member {observable.<number>}
     */
    this.width = ko.observable(0);
    unitConverter.add(this.width);
    this.width.subscribe(() => this.recombine());

    /**
     * Flag to lock out recombination, usually because we are in a
     * sequence of steps and recombination can wait. See recombine()
     * for more.
     * @member {boolean}
     * @private
     */
    this.disableRecombination = false;

    /**
     * Flag to lock out toolpath generation.
     * @member {boolean}
     * @private
     */
    this.generatingToolpath = false;
  }

  /**
   * @override
   */
  initialise(nodes) {
    this.addPopovers(POPOVERS, nodes);
  }

  /**
   * Toggle the display of the detail dropdown
   */
  toggleDetail() {
    this.showDetail(!this.showDetail());
  }

  /**
   * Remove the geometry contributed by this operation
   */
  removeCombinedGeometry() {
    if (this.combinedGeometrySvg)
      this.combinedGeometrySvg.remove();
    this.combinedGeometrySvg = null;
    this.combinedGeometry = null;
  }

  /**
   * Remove the tool path geometry contributed by this operation
   */
  removeToolPaths() {
    if (this.toolPathSvg)
      this.toolPathSvg.remove();
    this.toolPathSvg = null;
    this.toolPaths([]);
  }

  /**
   * Get the width of the path created by the tool as it cuts
   * @return {number} in internal units
   */
  toolPathWidth() {
    const td = App.models.Tool.diameter.toUnits("internal");
    const width = this.width.toUnits("internal");
    if (width < td)
      return td;
    return width;
  }

  /**
   * Invoked from HTML. Operations are bound to this view model, so
   * when removeOperation is bound it comes here.
   */
  removeOperation() {
    App.models.Operations.removeOperation(this);
  }

  /**
   * (Re)generate combinedGeometry from the paths associated with this
   * operation (this.rawPaths) and trigger gCode recompilation
   * @return {boolean} true if recombination was successful
   */
  recombine() {
    if (this.disableRecombination)
      return;

    const startTime = Date.now();
    const opName = this.operation();
    console.debug(`Operation ${this.name()} ${opName} recombine...`);

    this.removeCombinedGeometry();
    this.removeToolPaths();

    const all = [];
    for (const rp of this.rawPaths) {
      // rawPaths are RawPath
      const geometry = SnapPaths.toInternal(rp.path);
      const fillRule = rp.nonzero
            ? ClipperLib.PolyFillType.pftNonZero
            : ClipperLib.PolyFillType.pftEvenOdd;
      all.push(InternalPaths.simplifyAndClean(geometry, fillRule));
    }

    let clipType;
    switch (this.combineOp()) {
    case "Intersect": clipType = ClipperLib.ClipType.ctIntersection; break;
    case "Diff":      clipType = ClipperLib.ClipType.ctDifference; break;
    case "Xor":       clipType = ClipperLib.ClipType.ctXor; break;
    case "Union":
    default:          clipType = ClipperLib.ClipType.ctUnion; break;
    }

    // Merge
    this.combinedGeometry = all[0];
    for (let i = 1; i < all.length; ++i)
      this.combinedGeometry = InternalPaths.clip(
        this.combinedGeometry, all[i], clipType);

    let previewGeometry = this.combinedGeometry;

    if (previewGeometry.length > 0) {
      let off = this.margin.toUnits("internal");
      if (opName === "Pocket"
          || opName === "V Carve"
          || opName === "Inside")
        off = -off;
      if (opName != "Engrave" && off != 0) {
        previewGeometry = InternalPaths.offset(previewGeometry, off);
      }

      if (opName === "Inside"
          || opName === "Outside"
          || opName === "Perforate") {
        const width = this.toolPathWidth();
        if (opName == "Inside")
          previewGeometry = InternalPaths.diff(
            previewGeometry, InternalPaths.offset(previewGeometry, -width));
        else // Outside or Perforate
          previewGeometry = InternalPaths.diff(
            InternalPaths.offset(previewGeometry, width), previewGeometry);
      }
    }

    if (previewGeometry.length > 0) {
      const path = SnapPaths.fromInternal(previewGeometry);
      if (path) {
        // Add the new geometry to the global SVG group
        this.combinedGeometrySvg = App.svgGroups.combinedGeometry
        .path(path)
        .attr("class", "combinedGeometry");
        this.enabled(true);
      }
    }

    console.debug(`Operation ${this.name()} recombine took ${Date.now() - startTime}`);

    this.generateToolPaths();
  }

  /**
   * Generate the tool path(s) for this operation. The tool paths are
   * type CamPath and are written to `this.toolPaths`. Generating toolpaths
   * invalidates Gcode, among other things. An event `TOOL_PATHS_CHANGED` is
   * raised to signal this to the rest of the app.
   */
  generateToolPaths() {
    const startTime = Date.now();
    console.debug(`generateToolPaths for "${this.name()}"...`);

    this.generatingToolpath = true;
    this.removeToolPaths();

    let geometry = this.combinedGeometry;
    const opName = this.operation();

    let off = this.margin.toUnits("internal");
    if (opName == "Pocket"
        || opName == "V Carve"
        || opName == "Inside")
      off = -off;
    if (opName !== "Engrave" && off != 0)
      geometry = InternalPaths.offset(geometry, off);

    const toolModel = App.models.Tool;
    const toolDiameter = toolModel.diameter.toUnits("internal");
    const passDepth = toolModel.passDepth.toUnits("internal");
    const stepover = toolModel.stepover();

    let paths, width;
    switch (opName) {

    case "Pocket":
      paths = Cam.concentricPocket(geometry, toolDiameter, 1 - stepover,
                               this.direction() == "Climb");
      break;

    case "Raster Pocket":
      // Implemented, but not currently used
      paths = Cam.rasterPocket(geometry, toolDiameter, 1 - stepover,
                               this.direction() == "Climb");
      break;

    case "V Carve":
      // Not currently implemented
      paths = Cam.vCarve(
        geometry,
        App.models.Tool.angle(),
        this.width.toUnits("internal"),
        passDepth,
        this.cutDepth(),
        this.direction() === "Climb");
      break;

    case "Inside": case "Outside":
      width = this.width.toUnits("internal");
      if (width < toolDiameter)
        width = toolDiameter;
      paths = Cam.outline(
        geometry, toolDiameter,
        opName === "Inside", // isInside
        width,
        1 - stepover,
        this.direction() === "Climb");
      break;

    case "Perforate":
      paths = Cam.perforate(
        geometry, toolDiameter, this.spacing.toUnits("internal"),
        App.models.Material.zOrigin() === "Top"
        ? 0 : this.cutDepth(),
        App.models.Material.zOrigin() === "Top"
        ? -this.cutDepth() : 0
      );
      break;

    case "Engrave":
      paths = Cam.engrave(geometry, this.direction() === "Climb");
      break;
    }
    this.toolPaths(paths);

    // Display the computer toolpaths
    const spaths = SnapPaths.fromInternal(
      InternalPaths.fromCamPaths(this.toolPaths()));
    if (spaths && spaths.length > 0) {
      this.toolPathSvg = App.svgGroups.toolPaths
      .path(spaths)
      .attr("class", "toolPath");
    } else {
      App.showAlert("noToolPaths", "alert-warning", this.name());
    }

    console.debug(`generateToolPaths for "${this.name()}" took ${Date.now() - startTime} and generated ${spaths.length} paths`);

    this.enabled(true);
    this.generatingToolpath = false;

    // Signal this change to other listeners
    document.dispatchEvent(new Event("TOOL_PATHS_CHANGED"));
  }

  /**
   * @override
   */
  toJson() {
    const opName = this.operation();
    const result = {
      rawPaths: this.rawPaths,
      name: this.name(),
      enabled: this.enabled(),
      combineOp: this.combineOp(),
      operation: opName
    };

    if (opName !== "V Carve") {
      // direction and ramp ignored for V Carve
      result.direction = this.direction();
      result.cutDepth = this.cutDepth();
      result.ramp = this.ramp();
    }

    if (opName !== 'Engrave')
      // Margin is a non-concept for engraving
      result.margin = this.margin();

    if (opName === 'Inside' || opName === 'Outside')
      // width only meaningful for these operations
      result.width = this.width();

    return result;
  };

  /**
   * @override
   */
  fromJson(json) {
    // suppress recombine until we're finished
    this.disableRecombination = true;

    this.rawPaths = json.rawPaths;
    this.updateObservable(json, 'name');
    this.updateObservable(json, 'ramp');
    this.updateObservable(json, 'combineOp');
    this.updateObservable(json, 'operation');
    this.updateObservable(json, 'direction');
    this.updateObservable(json, 'cutDepth');
    this.updateObservable(json, 'margin');
    this.updateObservable(json, 'width');
    this.updateObservable(json, 'enabled');

    this.disableRecombination = false;
    this.recombine();
  };
}

export { OperationViewModel }
